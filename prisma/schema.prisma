// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
    id        String    @id @default(uuid())
    email     String    @unique
    password  String
    firstName String
    lastName  String
    role      String    @default("user")
    // verifyToken       String?   @unique
    // verifyTokenExpiry DateTime?
    // resetToken        String?   @unique
    // resetTokenExpiry  DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    bookings  Booking[]
    reviews   Review[]
}

model Room {
    id          String    @id @default(uuid())
    name        String
    description String
    price       Float
    capacity    Int
    amenities   String[]
    images      String[]
    available   Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    bookings    Booking[]
    reviews     Review[]
}

model Booking {
    id              String   @id @default(uuid())
    userId          String?
    roomId          String
    checkIn         DateTime
    checkOut        DateTime
    guests          Int
    totalPrice      Float
    status          String   @default("pending")
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    guestEmail      String?
    guestName       String?
    guestPhone      String?
    specialRequests String?
    user            User?    @relation(fields: [userId], references: [id])
    room            Room     @relation(fields: [roomId], references: [id])
    payment         Payment?
    review          Review?
}

model Payment {
    id        String   @id @default(uuid())
    bookingId String   @unique
    amount    Float
    status    String   @default("pending")
    method    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    booking   Booking  @relation(fields: [bookingId], references: [id])
}

model Review {
    id        String   @id @default(uuid())
    userId    String
    roomId    String
    bookingId String   @unique
    rating    Int
    comment   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    room      Room     @relation(fields: [roomId], references: [id])
    booking   Booking  @relation(fields: [bookingId], references: [id])
}
